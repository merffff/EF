#!/usr/bin/env php
<?php

use Doctrine\Migrations\Configuration\Configuration;
use Doctrine\Migrations\Configuration\Connection\ExistingConnection;
use Doctrine\Migrations\Configuration\Migration\ExistingConfiguration;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration;
use Doctrine\Migrations\Tools\Console\Command as MigrationsCommand;
use Doctrine\ORM\Tools\Console\Command as ORMCommand;
use Doctrine\ORM\Tools\Console\ConsoleRunner;
use Doctrine\ORM\Tools\Console\EntityManagerProvider\SingleManagerProvider;
use Symfony\Component\Console\Application;

require __DIR__ . '/../config/bootstrap.php';

/** @var \Doctrine\ORM\EntityManagerInterface $entityManager */
$entityManager = require __DIR__ . '/../config/bootstrap.php';


$migrationsConfig = new Configuration();


$migrationsConfig->addMigrationsDirectory(
    'DoctrineMigrations',
    __DIR__ . '/../migrations'
);


$storageConfig = new TableMetadataStorageConfiguration();
$storageConfig->setTableName('migration_versions');
$storageConfig->setVersionColumnName('version');
$storageConfig->setVersionColumnLength(191); // Для совместимости с MySQL
$storageConfig->setExecutedAtColumnName('executed_at');
$migrationsConfig->setMetadataStorageConfiguration($storageConfig);


$dependencyFactory = DependencyFactory::fromConnection(
    new ExistingConfiguration($migrationsConfig),
    new ExistingConnection($entityManager->getConnection())
);


$cli = new Application('Doctrine Command Line Tool');


ConsoleRunner::addCommands($cli, new SingleManagerProvider($entityManager));


$cli->addCommands([
    new MigrationsCommand\CurrentCommand($dependencyFactory),
    new MigrationsCommand\DiffCommand($dependencyFactory),
    new MigrationsCommand\ExecuteCommand($dependencyFactory),
    new MigrationsCommand\GenerateCommand($dependencyFactory),
    new MigrationsCommand\LatestCommand($dependencyFactory),
    new MigrationsCommand\ListCommand($dependencyFactory),
    new MigrationsCommand\MigrateCommand($dependencyFactory),
    new MigrationsCommand\RollupCommand($dependencyFactory),
    new MigrationsCommand\StatusCommand($dependencyFactory),
    new MigrationsCommand\VersionCommand($dependencyFactory),
]);

$cli->run();