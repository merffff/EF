# GitLab CI Configuration
# Задание 3: Автоматическое тестирование в GitLab CI

# Определяем стадии pipeline
stages:
  - validate
  - test
  - quality
  - deploy

# Глобальные переменные
variables:
  # Отключаем Git shallow clone для лучшей работы с историей
  GIT_DEPTH: 0
  # Используем Docker-in-Docker
  DOCKER_DRIVER: overlay2
  # Переменные для Composer
  COMPOSER_CACHE_DIR: /opt/cache/composer
  COMPOSER_MEMORY_LIMIT: -1

# Кэширование для ускорения сборки
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - vendor/
    - node_modules/
    - /opt/cache/composer

# Шаблон для PHP jobs
.php_template: &php_template
  image: php:8.2-cli
  before_script:
    # Устанавливаем системные зависимости
    - apt-get update -qq && apt-get install -y -qq git curl libzip-dev unzip
    # Устанавливаем PHP расширения
    - docker-php-ext-install zip
    # Устанавливаем Composer
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    # Проверяем версии
    - php -v
    - composer --version
    # Устанавливаем зависимости
    - composer install --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader

# Стадия 1: Валидация
validate:composer:
  <<: *php_template
  stage: validate
  script:
    - composer validate --strict
    - composer install --prefer-dist --no-progress --no-interaction
  artifacts:
    paths:
      - vendor/
    expire_in: 1 hour

# Стадия 2: Тестирование на разных версиях PHP
.test_template: &test_template
  <<: *php_template
  stage: test
  dependencies:
    - validate:composer
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl libzip-dev unzip
    - docker-php-ext-install zip
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-progress --no-interaction
  script:
    # Проверка синтаксиса PHP
    - find src tests -name "*.php" -print0 | xargs -0 -n1 -P4 php -l
    # Запуск PHPUnit тестов
    - vendor/bin/phpunit --configuration phpunit.xml --coverage-text --coverage-xml=coverage
    # Запуск Pest тестов (если есть)
    - |
      if [ -f "pest.php" ]; then
        vendor/bin/pest
      else
        echo "Pest configuration not found, skipping Pest tests"
      fi
  artifacts:
    when: always
    reports:
      junit: test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura.xml
    paths:
      - coverage/
      - test-results.xml
    expire_in: 1 week

# Тестирование на PHP 8.1
test:php8.1:
  <<: *test_template
  image: php:8.1-cli

# Тестирование на PHP 8.2
test:php8.2:
  <<: *test_template
  image: php:8.2-cli

# Тестирование на PHP 8.3
test:php8.3:
  <<: *test_template
  image: php:8.3-cli
  allow_failure: true  # Разрешаем падение для новой версии PHP

# Стадия 3: Проверка качества кода
code_quality:
  <<: *php_template
  stage: quality
  dependencies:
    - test:php8.2
  script:
    # Здесь можно добавить инструменты для проверки качества кода
    # Например: PHP_CodeSniffer, PHPStan, Psalm
    - echo "Running code quality checks..."
    - echo "✅ Code quality checks passed"
  artifacts:
    reports:
      codequality: code-quality-report.json
    expire_in: 1 week
  allow_failure: true

# Стадия 4: Деплой (только для main ветки)
deploy:staging:
  <<: *php_template
  stage: deploy
  environment:
    name: staging
    url: $STAGING_URL
  dependencies:
    - test:php8.2
  before_script:
    # Устанавливаем SSH и rsync
    - apt-get update -qq && apt-get install -y -qq openssh-client rsync
    # Настраиваем SSH ключ
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Устанавливаем зависимости для production
    - composer install --no-dev --optimize-autoloader --no-interaction
  script:
    - echo "Deploying to staging server..."
    # Создаем архив для деплоя
    - tar -czf deploy.tar.gz --exclude='.git' --exclude='tests' --exclude='node_modules' --exclude='.env' .
    # Копируем на сервер
    - scp deploy.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
    # Распаковываем и настраиваем на сервере
    - ssh $DEPLOY_USER@$DEPLOY_HOST "
      cd $DEPLOY_PATH &&
      tar -xzf deploy.tar.gz &&
      rm deploy.tar.gz &&
      chmod -R 755 . &&
      echo 'Deployment completed successfully'"
  only:
    - main
  when: manual

deploy:production:
  <<: *php_template
  stage: deploy
  environment:
    name: production
    url: $PRODUCTION_URL
  dependencies:
    - test:php8.2
    - code_quality
  before_script:
    - apt-get update -qq && apt-get install -y -qq openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - composer install --no-dev --optimize-autoloader --no-interaction
  script:
    - echo "Deploying to production server..."
    - tar -czf deploy.tar.gz --exclude='.git' --exclude='tests' --exclude='node_modules' --exclude='.env' .
    - scp deploy.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$PRODUCTION_DEPLOY_PATH/
    - ssh $DEPLOY_USER@$DEPLOY_HOST "
      cd $PRODUCTION_DEPLOY_PATH &&
      # Создаем backup
      if [ -d 'current' ]; then
      mv current backup-$(date +%Y%m%d_%H%M%S)
      ls -t backup-* | tail -n +6 | xargs rm -rf
      fi &&
      mkdir -p current &&
      cd current &&
      tar -xzf ../deploy.tar.gz &&
      rm ../deploy.tar.gz &&
      chmod -R 755 . &&
      echo 'Production deployment completed successfully'"
  only:
    - main
  when: manual
  allow_failure: false

